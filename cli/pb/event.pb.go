// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventStatus int32

const (
	EventStatus_UNDEFINED EventStatus = 0
	EventStatus_FAILED    EventStatus = 1
	EventStatus_SUCCEEDED EventStatus = 2
)

var EventStatus_name = map[int32]string{
	0: "UNDEFINED",
	1: "FAILED",
	2: "SUCCEEDED",
}

var EventStatus_value = map[string]int32{
	"UNDEFINED": 0,
	"FAILED":    1,
	"SUCCEEDED": 2,
}

func (x EventStatus) String() string {
	return proto.EnumName(EventStatus_name, int32(x))
}

func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

type EventERC20Deposited struct {
	Id                   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Sender               string      `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount               string      `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Retry                uint32      `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
	Status               EventStatus `protobuf:"varint,6,opt,name=status,proto3,enum=tak1827.evmbridge.cli.EventStatus" json:"status,omitempty"`
	UpdatedAt            *time.Time  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventERC20Deposited) Reset()      { *m = EventERC20Deposited{} }
func (*EventERC20Deposited) ProtoMessage() {}
func (*EventERC20Deposited) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}
func (m *EventERC20Deposited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventERC20Deposited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventERC20Deposited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventERC20Deposited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventERC20Deposited.Merge(m, src)
}
func (m *EventERC20Deposited) XXX_Size() int {
	return m.Size()
}
func (m *EventERC20Deposited) XXX_DiscardUnknown() {
	xxx_messageInfo_EventERC20Deposited.DiscardUnknown(m)
}

var xxx_messageInfo_EventERC20Deposited proto.InternalMessageInfo

func (m *EventERC20Deposited) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventERC20Deposited) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventERC20Deposited) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventERC20Deposited) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventERC20Deposited) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *EventERC20Deposited) GetStatus() EventStatus {
	if m != nil {
		return m.Status
	}
	return EventStatus_UNDEFINED
}

func (m *EventERC20Deposited) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type EventNFTDeposited struct {
	Id                   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Sender               string      `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Tokenid              uint64      `protobuf:"varint,4,opt,name=tokenid,proto3" json:"tokenid,omitempty"`
	Retry                uint32      `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
	Status               EventStatus `protobuf:"varint,6,opt,name=status,proto3,enum=tak1827.evmbridge.cli.EventStatus" json:"status,omitempty"`
	UpdatedAt            *time.Time  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventNFTDeposited) Reset()      { *m = EventNFTDeposited{} }
func (*EventNFTDeposited) ProtoMessage() {}
func (*EventNFTDeposited) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{1}
}
func (m *EventNFTDeposited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNFTDeposited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNFTDeposited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNFTDeposited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNFTDeposited.Merge(m, src)
}
func (m *EventNFTDeposited) XXX_Size() int {
	return m.Size()
}
func (m *EventNFTDeposited) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNFTDeposited.DiscardUnknown(m)
}

var xxx_messageInfo_EventNFTDeposited proto.InternalMessageInfo

func (m *EventNFTDeposited) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNFTDeposited) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventNFTDeposited) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventNFTDeposited) GetTokenid() uint64 {
	if m != nil {
		return m.Tokenid
	}
	return 0
}

func (m *EventNFTDeposited) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *EventNFTDeposited) GetStatus() EventStatus {
	if m != nil {
		return m.Status
	}
	return EventStatus_UNDEFINED
}

func (m *EventNFTDeposited) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("tak1827.evmbridge.cli.EventStatus", EventStatus_name, EventStatus_value)
	proto.RegisterType((*EventERC20Deposited)(nil), "tak1827.evmbridge.cli.EventERC20Deposited")
	proto.RegisterType((*EventNFTDeposited)(nil), "tak1827.evmbridge.cli.EventNFTDeposited")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x90, 0xb1, 0x6e, 0xd4, 0x30,
	0x1c, 0xc6, 0xcf, 0x47, 0x9a, 0xea, 0x7c, 0x6a, 0x75, 0x98, 0x82, 0xac, 0x1b, 0xdc, 0xa8, 0x62,
	0x88, 0x90, 0x70, 0x20, 0x0c, 0x45, 0x2c, 0xa8, 0xbd, 0x38, 0x52, 0x25, 0x74, 0x43, 0xda, 0x2e,
	0x2c, 0x28, 0x39, 0x9b, 0x60, 0xf5, 0x12, 0x47, 0x89, 0x73, 0x12, 0x1b, 0x8f, 0xc0, 0xc8, 0x23,
	0xf0, 0x28, 0x8c, 0x8c, 0x6c, 0x70, 0xe1, 0x05, 0x78, 0x02, 0x84, 0x62, 0xe7, 0x24, 0x06, 0x46,
	0x86, 0x6e, 0xfe, 0x3e, 0x7f, 0xff, 0x4f, 0xff, 0xdf, 0x1f, 0x4e, 0xc5, 0x46, 0x94, 0x9a, 0x56,
	0xb5, 0xd2, 0x0a, 0xdd, 0xd7, 0xe9, 0xcd, 0xd3, 0xe7, 0xe1, 0x29, 0x15, 0x9b, 0x22, 0xab, 0x25,
	0xcf, 0x05, 0x5d, 0xad, 0xe5, 0xfc, 0x28, 0x57, 0xb9, 0x32, 0x89, 0xa0, 0x7f, 0xd9, 0xf0, 0xfc,
	0x38, 0x57, 0x2a, 0x5f, 0x8b, 0xc0, 0xa8, 0xac, 0x7d, 0x1b, 0x68, 0x59, 0x88, 0x46, 0xa7, 0x45,
	0x65, 0x03, 0x27, 0xbf, 0x01, 0xbc, 0xc7, 0xfa, 0x76, 0x96, 0x2c, 0xc2, 0x27, 0x91, 0xa8, 0x54,
	0x23, 0xb5, 0xe0, 0xe8, 0x10, 0x8e, 0x25, 0xc7, 0xc0, 0x03, 0xbe, 0x93, 0x8c, 0x25, 0x47, 0x47,
	0x70, 0x4f, 0xab, 0x1b, 0x51, 0xe2, 0xb1, 0x07, 0xfc, 0x49, 0x62, 0x05, 0x7a, 0x00, 0xdd, 0x46,
	0x94, 0x5c, 0xd4, 0xf8, 0x8e, 0xb1, 0x07, 0xd5, 0xfb, 0x69, 0xa1, 0xda, 0x52, 0x63, 0xc7, 0xfa,
	0x56, 0xf5, 0x2d, 0xb5, 0xd0, 0xf5, 0x7b, 0xbc, 0xe7, 0x01, 0xff, 0x20, 0xb1, 0x02, 0xbd, 0x80,
	0x6e, 0xa3, 0x53, 0xdd, 0x36, 0xd8, 0xf5, 0x80, 0x7f, 0x18, 0x9e, 0xd0, 0x7f, 0x22, 0x52, 0xb3,
	0xe7, 0xa5, 0x49, 0x26, 0xc3, 0x04, 0x7a, 0x09, 0x61, 0x5b, 0xf1, 0x54, 0x0b, 0xfe, 0x26, 0xd5,
	0x78, 0xdf, 0x03, 0xfe, 0x34, 0x9c, 0x53, 0x4b, 0x4d, 0x77, 0xd4, 0xf4, 0x6a, 0x47, 0x7d, 0xee,
	0x7c, 0xfc, 0x7e, 0x0c, 0x92, 0xc9, 0x30, 0x73, 0xa6, 0xfb, 0x03, 0xdc, 0x35, 0xc5, 0xcb, 0xf8,
	0xea, 0x7f, 0xe1, 0x63, 0xb8, 0x6f, 0x02, 0x92, 0x1b, 0x7e, 0x27, 0xd9, 0xc9, 0x5b, 0x78, 0x80,
	0x47, 0xa7, 0x70, 0xfa, 0x57, 0x2f, 0x3a, 0x80, 0x93, 0xeb, 0x65, 0xc4, 0xe2, 0x8b, 0x25, 0x8b,
	0x66, 0x23, 0x04, 0xa1, 0x1b, 0x9f, 0x5d, 0xbc, 0x62, 0xd1, 0x0c, 0xf4, 0x5f, 0x97, 0xd7, 0x8b,
	0x05, 0x63, 0x11, 0x8b, 0x66, 0xe3, 0xf3, 0xf8, 0xdb, 0x96, 0x8c, 0x7e, 0x6d, 0x09, 0xf8, 0xd0,
	0x11, 0xf0, 0xb9, 0x23, 0xe0, 0x4b, 0x47, 0xc0, 0xd7, 0x8e, 0x80, 0x1f, 0x1d, 0x01, 0x9f, 0x7e,
	0x92, 0xd1, 0xeb, 0x87, 0xb9, 0xd4, 0xef, 0xda, 0x8c, 0xae, 0x54, 0x11, 0x0c, 0x44, 0x81, 0xd8,
	0x14, 0x8f, 0x2d, 0x52, 0xb0, 0x5a, 0xcb, 0xa0, 0xca, 0x32, 0xd7, 0x6c, 0xf9, 0xec, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x67, 0x5c, 0xa9, 0x3f, 0xe6, 0x02, 0x00, 0x00,
}

func (this *EventERC20Deposited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventERC20Deposited)
	if !ok {
		that2, ok := that.(EventERC20Deposited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Retry != that1.Retry {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EventNFTDeposited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventNFTDeposited)
	if !ok {
		that2, ok := that.(EventNFTDeposited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Tokenid != that1.Tokenid {
		return false
	}
	if this.Retry != that1.Retry {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EventERC20Deposited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.EventERC20Deposited{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Retry: "+fmt.Sprintf("%#v", this.Retry)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventNFTDeposited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.EventNFTDeposited{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Tokenid: "+fmt.Sprintf("%#v", this.Tokenid)+",\n")
	s = append(s, "Retry: "+fmt.Sprintf("%#v", this.Retry)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EventERC20Deposited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventERC20Deposited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventERC20Deposited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvent(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Retry != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventNFTDeposited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNFTDeposited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNFTDeposited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintEvent(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Retry != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x28
	}
	if m.Tokenid != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Tokenid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventERC20Deposited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Retry != 0 {
		n += 1 + sovEvent(uint64(m.Retry))
	}
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventNFTDeposited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Tokenid != 0 {
		n += 1 + sovEvent(uint64(m.Tokenid))
	}
	if m.Retry != 0 {
		n += 1 + sovEvent(uint64(m.Retry))
	}
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EventERC20Deposited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventERC20Deposited{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Retry:` + fmt.Sprintf("%v", this.Retry) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventNFTDeposited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventNFTDeposited{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Tokenid:` + fmt.Sprintf("%v", this.Tokenid) + `,`,
		`Retry:` + fmt.Sprintf("%v", this.Retry) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EventERC20Deposited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventERC20Deposited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventERC20Deposited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNFTDeposited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNFTDeposited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNFTDeposited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokenid", wireType)
			}
			m.Tokenid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokenid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
